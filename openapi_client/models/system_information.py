# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'language': 'str',
        'header': 'str',
        'message': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'language': 'language',
        'header': 'header',
        'message': 'message'
    }

    def __init__(self, uuid=None, language=None, header=None, message=None):  # noqa: E501
        """SystemInformation - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._language = None
        self._header = None
        self._message = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if language is not None:
            self.language = language
        if header is not None:
            self.header = header
        if message is not None:
            self.message = message

    @property
    def uuid(self):
        """Gets the uuid of this SystemInformation.  # noqa: E501

        Unique identifier for the system information.  # noqa: E501

        :return: The uuid of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemInformation.

        Unique identifier for the system information.  # noqa: E501

        :param uuid: The uuid of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def language(self):
        """Gets the language of this SystemInformation.  # noqa: E501

        Iso Language code, e.g. en_us.  # noqa: E501

        :return: The language of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SystemInformation.

        Iso Language code, e.g. en_us.  # noqa: E501

        :param language: The language of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def header(self):
        """Gets the header of this SystemInformation.  # noqa: E501

        Message header.  # noqa: E501

        :return: The header of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this SystemInformation.

        Message header.  # noqa: E501

        :param header: The header of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def message(self):
        """Gets the message of this SystemInformation.  # noqa: E501

        message body.  # noqa: E501

        :return: The message of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SystemInformation.

        message body.  # noqa: E501

        :param message: The message of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
