# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Pharmaceutical(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pharmaceutical_id': 'str',
        'gtin': 'str',
        'trade_name': 'str',
        'ean_code': 'str',
        'manufacturer_id': 'str',
        'image': 'str'
    }

    attribute_map = {
        'pharmaceutical_id': 'pharmaceutical_id',
        'gtin': 'gtin',
        'trade_name': 'trade_name',
        'ean_code': 'ean_code',
        'manufacturer_id': 'manufacturer_id',
        'image': 'image'
    }

    def __init__(self, pharmaceutical_id=None, gtin=None, trade_name=None, ean_code=None, manufacturer_id=None, image=None):  # noqa: E501
        """Pharmaceutical - a model defined in OpenAPI"""  # noqa: E501

        self._pharmaceutical_id = None
        self._gtin = None
        self._trade_name = None
        self._ean_code = None
        self._manufacturer_id = None
        self._image = None
        self.discriminator = None

        if pharmaceutical_id is not None:
            self.pharmaceutical_id = pharmaceutical_id
        if gtin is not None:
            self.gtin = gtin
        if trade_name is not None:
            self.trade_name = trade_name
        if ean_code is not None:
            self.ean_code = ean_code
        if manufacturer_id is not None:
            self.manufacturer_id = manufacturer_id
        if image is not None:
            self.image = image

    @property
    def pharmaceutical_id(self):
        """Gets the pharmaceutical_id of this Pharmaceutical.  # noqa: E501

        Either gtin or synthetical for precision medicine.  # noqa: E501

        :return: The pharmaceutical_id of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._pharmaceutical_id

    @pharmaceutical_id.setter
    def pharmaceutical_id(self, pharmaceutical_id):
        """Sets the pharmaceutical_id of this Pharmaceutical.

        Either gtin or synthetical for precision medicine.  # noqa: E501

        :param pharmaceutical_id: The pharmaceutical_id of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._pharmaceutical_id = pharmaceutical_id

    @property
    def gtin(self):
        """Gets the gtin of this Pharmaceutical.  # noqa: E501

        Global trade item number (GS1)  # noqa: E501

        :return: The gtin of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Pharmaceutical.

        Global trade item number (GS1)  # noqa: E501

        :param gtin: The gtin of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._gtin = gtin

    @property
    def trade_name(self):
        """Gets the trade_name of this Pharmaceutical.  # noqa: E501

        Manufacturers official name of the pharmaceutical product.  # noqa: E501

        :return: The trade_name of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._trade_name

    @trade_name.setter
    def trade_name(self, trade_name):
        """Sets the trade_name of this Pharmaceutical.

        Manufacturers official name of the pharmaceutical product.  # noqa: E501

        :param trade_name: The trade_name of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._trade_name = trade_name

    @property
    def ean_code(self):
        """Gets the ean_code of this Pharmaceutical.  # noqa: E501

        EAN code.  # noqa: E501

        :return: The ean_code of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._ean_code

    @ean_code.setter
    def ean_code(self, ean_code):
        """Sets the ean_code of this Pharmaceutical.

        EAN code.  # noqa: E501

        :param ean_code: The ean_code of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._ean_code = ean_code

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this Pharmaceutical.  # noqa: E501

        Manufaturer id  # noqa: E501

        :return: The manufacturer_id of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this Pharmaceutical.

        Manufaturer id  # noqa: E501

        :param manufacturer_id: The manufacturer_id of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._manufacturer_id = manufacturer_id

    @property
    def image(self):
        """Gets the image of this Pharmaceutical.  # noqa: E501

        Image URL representing the product.  # noqa: E501

        :return: The image of this Pharmaceutical.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Pharmaceutical.

        Image URL representing the product.  # noqa: E501

        :param image: The image of this Pharmaceutical.  # noqa: E501
        :type: str
        """

        self._image = image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pharmaceutical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
