# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Container(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container_id': 'str',
        'epc_code': 'str',
        'label': 'str',
        'barcode': 'str',
        'rf_id': 'str',
        'quantity': 'float',
        'unit': 'str',
        'current_location_id': 'str',
        'owner_stakeholder_id': 'str',
        'parent_container_id': 'str'
    }

    attribute_map = {
        'container_id': 'container_id',
        'epc_code': 'epc_code',
        'label': 'label',
        'barcode': 'barcode',
        'rf_id': 'rf_id',
        'quantity': 'quantity',
        'unit': 'unit',
        'current_location_id': 'current_location_id',
        'owner_stakeholder_id': 'owner_stakeholder_id',
        'parent_container_id': 'parent_container_id'
    }

    def __init__(self, container_id=None, epc_code=None, label=None, barcode=None, rf_id=None, quantity=None, unit=None, current_location_id=None, owner_stakeholder_id=None, parent_container_id=None):  # noqa: E501
        """Container - a model defined in OpenAPI"""  # noqa: E501

        self._container_id = None
        self._epc_code = None
        self._label = None
        self._barcode = None
        self._rf_id = None
        self._quantity = None
        self._unit = None
        self._current_location_id = None
        self._owner_stakeholder_id = None
        self._parent_container_id = None
        self.discriminator = None

        if container_id is not None:
            self.container_id = container_id
        if epc_code is not None:
            self.epc_code = epc_code
        if label is not None:
            self.label = label
        if barcode is not None:
            self.barcode = barcode
        if rf_id is not None:
            self.rf_id = rf_id
        if quantity is not None:
            self.quantity = quantity
        if unit is not None:
            self.unit = unit
        if current_location_id is not None:
            self.current_location_id = current_location_id
        if owner_stakeholder_id is not None:
            self.owner_stakeholder_id = owner_stakeholder_id
        if parent_container_id is not None:
            self.parent_container_id = parent_container_id

    @property
    def container_id(self):
        """Gets the container_id of this Container.  # noqa: E501

        Unique identifier representing a specific container.  # noqa: E501

        :return: The container_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.

        Unique identifier representing a specific container.  # noqa: E501

        :param container_id: The container_id of this Container.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def epc_code(self):
        """Gets the epc_code of this Container.  # noqa: E501

        EPC code  # noqa: E501

        :return: The epc_code of this Container.  # noqa: E501
        :rtype: str
        """
        return self._epc_code

    @epc_code.setter
    def epc_code(self, epc_code):
        """Sets the epc_code of this Container.

        EPC code  # noqa: E501

        :param epc_code: The epc_code of this Container.  # noqa: E501
        :type: str
        """

        self._epc_code = epc_code

    @property
    def label(self):
        """Gets the label of this Container.  # noqa: E501

        Serialization label.  # noqa: E501

        :return: The label of this Container.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Container.

        Serialization label.  # noqa: E501

        :param label: The label of this Container.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def barcode(self):
        """Gets the barcode of this Container.  # noqa: E501

        barcode on container. Normally equal to container id.  # noqa: E501

        :return: The barcode of this Container.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this Container.

        barcode on container. Normally equal to container id.  # noqa: E501

        :param barcode: The barcode of this Container.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def rf_id(self):
        """Gets the rf_id of this Container.  # noqa: E501

        RFID of RF tracking label on conatiner.  # noqa: E501

        :return: The rf_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._rf_id

    @rf_id.setter
    def rf_id(self, rf_id):
        """Sets the rf_id of this Container.

        RFID of RF tracking label on conatiner.  # noqa: E501

        :param rf_id: The rf_id of this Container.  # noqa: E501
        :type: str
        """

        self._rf_id = rf_id

    @property
    def quantity(self):
        """Gets the quantity of this Container.  # noqa: E501

        quantity of product in container.  # noqa: E501

        :return: The quantity of this Container.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Container.

        quantity of product in container.  # noqa: E501

        :param quantity: The quantity of this Container.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this Container.  # noqa: E501

        Unit for quantity measurement.  # noqa: E501

        :return: The unit of this Container.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Container.

        Unit for quantity measurement.  # noqa: E501

        :param unit: The unit of this Container.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def current_location_id(self):
        """Gets the current_location_id of this Container.  # noqa: E501

        Location id of last tracked locaction.  # noqa: E501

        :return: The current_location_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._current_location_id

    @current_location_id.setter
    def current_location_id(self, current_location_id):
        """Sets the current_location_id of this Container.

        Location id of last tracked locaction.  # noqa: E501

        :param current_location_id: The current_location_id of this Container.  # noqa: E501
        :type: str
        """

        self._current_location_id = current_location_id

    @property
    def owner_stakeholder_id(self):
        """Gets the owner_stakeholder_id of this Container.  # noqa: E501

        stakeholder id of the last tracked owner of the container.  # noqa: E501

        :return: The owner_stakeholder_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._owner_stakeholder_id

    @owner_stakeholder_id.setter
    def owner_stakeholder_id(self, owner_stakeholder_id):
        """Sets the owner_stakeholder_id of this Container.

        stakeholder id of the last tracked owner of the container.  # noqa: E501

        :param owner_stakeholder_id: The owner_stakeholder_id of this Container.  # noqa: E501
        :type: str
        """

        self._owner_stakeholder_id = owner_stakeholder_id

    @property
    def parent_container_id(self):
        """Gets the parent_container_id of this Container.  # noqa: E501

        id of the parent container or null.  # noqa: E501

        :return: The parent_container_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._parent_container_id

    @parent_container_id.setter
    def parent_container_id(self, parent_container_id):
        """Sets the parent_container_id of this Container.

        id of the parent container or null.  # noqa: E501

        :param parent_container_id: The parent_container_id of this Container.  # noqa: E501
        :type: str
        """

        self._parent_container_id = parent_container_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Container):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
