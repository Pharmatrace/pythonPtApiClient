# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'twitter_name': 'str',
        'linkedin_name': 'str',
        'facebook_name': 'str',
        'picture': 'str',
        'stakeholder_id': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'twitter_name': 'twitter_name',
        'linkedin_name': 'linkedin_name',
        'facebook_name': 'facebook_name',
        'picture': 'picture',
        'stakeholder_id': 'stakeholder_id',
        'active': 'active'
    }

    def __init__(self, first_name=None, last_name=None, email=None, twitter_name=None, linkedin_name=None, facebook_name=None, picture=None, stakeholder_id=None, active=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._email = None
        self._twitter_name = None
        self._linkedin_name = None
        self._facebook_name = None
        self._picture = None
        self._stakeholder_id = None
        self._active = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if twitter_name is not None:
            self.twitter_name = twitter_name
        if linkedin_name is not None:
            self.linkedin_name = linkedin_name
        if facebook_name is not None:
            self.facebook_name = facebook_name
        if picture is not None:
            self.picture = picture
        if stakeholder_id is not None:
            self.stakeholder_id = stakeholder_id
        if active is not None:
            self.active = active

    @property
    def first_name(self):
        """Gets the first_name of this Profile.  # noqa: E501

        First name of the PT network user.  # noqa: E501

        :return: The first_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Profile.

        First name of the PT network user.  # noqa: E501

        :param first_name: The first_name of this Profile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Profile.  # noqa: E501

        Last name of the PT network user.  # noqa: E501

        :return: The last_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Profile.

        Last name of the PT network user.  # noqa: E501

        :param last_name: The last_name of this Profile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501

        Email address  # noqa: E501

        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.

        Email address  # noqa: E501

        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def twitter_name(self):
        """Gets the twitter_name of this Profile.  # noqa: E501

        Twitter name  # noqa: E501

        :return: The twitter_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._twitter_name

    @twitter_name.setter
    def twitter_name(self, twitter_name):
        """Sets the twitter_name of this Profile.

        Twitter name  # noqa: E501

        :param twitter_name: The twitter_name of this Profile.  # noqa: E501
        :type: str
        """

        self._twitter_name = twitter_name

    @property
    def linkedin_name(self):
        """Gets the linkedin_name of this Profile.  # noqa: E501

        LinkedIn name  # noqa: E501

        :return: The linkedin_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._linkedin_name

    @linkedin_name.setter
    def linkedin_name(self, linkedin_name):
        """Sets the linkedin_name of this Profile.

        LinkedIn name  # noqa: E501

        :param linkedin_name: The linkedin_name of this Profile.  # noqa: E501
        :type: str
        """

        self._linkedin_name = linkedin_name

    @property
    def facebook_name(self):
        """Gets the facebook_name of this Profile.  # noqa: E501

        Facebook name  # noqa: E501

        :return: The facebook_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._facebook_name

    @facebook_name.setter
    def facebook_name(self, facebook_name):
        """Sets the facebook_name of this Profile.

        Facebook name  # noqa: E501

        :param facebook_name: The facebook_name of this Profile.  # noqa: E501
        :type: str
        """

        self._facebook_name = facebook_name

    @property
    def picture(self):
        """Gets the picture of this Profile.  # noqa: E501

        Image URL  # noqa: E501

        :return: The picture of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Profile.

        Image URL  # noqa: E501

        :param picture: The picture of this Profile.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def stakeholder_id(self):
        """Gets the stakeholder_id of this Profile.  # noqa: E501

        the PT network member that the user/profile is assigned to.  # noqa: E501

        :return: The stakeholder_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._stakeholder_id

    @stakeholder_id.setter
    def stakeholder_id(self, stakeholder_id):
        """Sets the stakeholder_id of this Profile.

        the PT network member that the user/profile is assigned to.  # noqa: E501

        :param stakeholder_id: The stakeholder_id of this Profile.  # noqa: E501
        :type: str
        """

        self._stakeholder_id = stakeholder_id

    @property
    def active(self):
        """Gets the active of this Profile.  # noqa: E501

        true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history  # noqa: E501

        :return: The active of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Profile.

        true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history  # noqa: E501

        :param active: The active of this Profile.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
