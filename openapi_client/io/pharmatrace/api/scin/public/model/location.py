# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Location(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'int',
        'uuid': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'location_type': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'uuid': 'uuid',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'location_type': 'location_type'
    }

    def __init__(self, timestamp=None, uuid=None, longitude=None, latitude=None, location_type=None):  # noqa: E501
        """Location - a model defined in OpenAPI"""  # noqa: E501

        self._timestamp = None
        self._uuid = None
        self._longitude = None
        self._latitude = None
        self._location_type = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if uuid is not None:
            self.uuid = uuid
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if location_type is not None:
            self.location_type = location_type

    @property
    def timestamp(self):
        """Gets the timestamp of this Location.  # noqa: E501

        GMT, C time format.  # noqa: E501

        :return: The timestamp of this Location.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Location.

        GMT, C time format.  # noqa: E501

        :param timestamp: The timestamp of this Location.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def uuid(self):
        """Gets the uuid of this Location.  # noqa: E501

        Unique identifier for the location.  # noqa: E501

        :return: The uuid of this Location.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Location.

        Unique identifier for the location.  # noqa: E501

        :param uuid: The uuid of this Location.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def longitude(self):
        """Gets the longitude of this Location.  # noqa: E501

        longitude.  # noqa: E501

        :return: The longitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.

        longitude.  # noqa: E501

        :param longitude: The longitude of this Location.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Location.  # noqa: E501

        latitude.  # noqa: E501

        :return: The latitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.

        latitude.  # noqa: E501

        :param latitude: The latitude of this Location.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def location_type(self):
        """Gets the location_type of this Location.  # noqa: E501

        type of container location, e.g. VESSEL, AIR, STREET, WAREHOUSE, PROCESSING, STORE, WITH_PATIENT, ...  # noqa: E501

        :return: The location_type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.

        type of container location, e.g. VESSEL, AIR, STREET, WAREHOUSE, PROCESSING, STORE, WITH_PATIENT, ...  # noqa: E501

        :param location_type: The location_type of this Location.  # noqa: E501
        :type: str
        """

        self._location_type = location_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
