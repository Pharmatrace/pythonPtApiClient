# coding: utf-8

"""
    PharmaTrace Supply Chain Information Network API

    The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: api@pharmatrace.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Stakeholder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trade_id': 'str',
        'trade_id_type': 'str',
        'display_name': 'str',
        'stakeholder_role': 'str',
        'wallet_id': 'str'
    }

    attribute_map = {
        'trade_id': 'trade_id',
        'trade_id_type': 'trade_id_type',
        'display_name': 'display_name',
        'stakeholder_role': 'stakeholder_role',
        'wallet_id': 'wallet_id'
    }

    def __init__(self, trade_id=None, trade_id_type=None, display_name=None, stakeholder_role=None, wallet_id=None):  # noqa: E501
        """Stakeholder - a model defined in OpenAPI"""  # noqa: E501

        self._trade_id = None
        self._trade_id_type = None
        self._display_name = None
        self._stakeholder_role = None
        self._wallet_id = None
        self.discriminator = None

        if trade_id is not None:
            self.trade_id = trade_id
        if trade_id_type is not None:
            self.trade_id_type = trade_id_type
        if display_name is not None:
            self.display_name = display_name
        if stakeholder_role is not None:
            self.stakeholder_role = stakeholder_role
        if wallet_id is not None:
            self.wallet_id = wallet_id

    @property
    def trade_id(self):
        """Gets the trade_id of this Stakeholder.  # noqa: E501

        unique official register entry, e.g. Handelsregistereintrag, court number, ...  # noqa: E501

        :return: The trade_id of this Stakeholder.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this Stakeholder.

        unique official register entry, e.g. Handelsregistereintrag, court number, ...  # noqa: E501

        :param trade_id: The trade_id of this Stakeholder.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def trade_id_type(self):
        """Gets the trade_id_type of this Stakeholder.  # noqa: E501

        type of the official register that has issued the trade id  # noqa: E501

        :return: The trade_id_type of this Stakeholder.  # noqa: E501
        :rtype: str
        """
        return self._trade_id_type

    @trade_id_type.setter
    def trade_id_type(self, trade_id_type):
        """Sets the trade_id_type of this Stakeholder.

        type of the official register that has issued the trade id  # noqa: E501

        :param trade_id_type: The trade_id_type of this Stakeholder.  # noqa: E501
        :type: str
        """

        self._trade_id_type = trade_id_type

    @property
    def display_name(self):
        """Gets the display_name of this Stakeholder.  # noqa: E501

        display name visible to other network members  # noqa: E501

        :return: The display_name of this Stakeholder.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Stakeholder.

        display name visible to other network members  # noqa: E501

        :param display_name: The display_name of this Stakeholder.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def stakeholder_role(self):
        """Gets the stakeholder_role of this Stakeholder.  # noqa: E501

        one of Manufacturer, Distributor, Pharmacy, Regulator, Hospital, MedicalPractice, CareProvider, DisposalFirm, Insurance, Patient, LawEnforcement  # noqa: E501

        :return: The stakeholder_role of this Stakeholder.  # noqa: E501
        :rtype: str
        """
        return self._stakeholder_role

    @stakeholder_role.setter
    def stakeholder_role(self, stakeholder_role):
        """Sets the stakeholder_role of this Stakeholder.

        one of Manufacturer, Distributor, Pharmacy, Regulator, Hospital, MedicalPractice, CareProvider, DisposalFirm, Insurance, Patient, LawEnforcement  # noqa: E501

        :param stakeholder_role: The stakeholder_role of this Stakeholder.  # noqa: E501
        :type: str
        """

        self._stakeholder_role = stakeholder_role

    @property
    def wallet_id(self):
        """Gets the wallet_id of this Stakeholder.  # noqa: E501

        id of the main wallet, which the stakeholder uses for PT token transactions with other stakeholders  # noqa: E501

        :return: The wallet_id of this Stakeholder.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this Stakeholder.

        id of the main wallet, which the stakeholder uses for PT token transactions with other stakeholders  # noqa: E501

        :param wallet_id: The wallet_id of this Stakeholder.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stakeholder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
